global proc shelf_James () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "python(\"import zen\");\nevalDeferred(\"zenTools\");" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "python(\"import zen\");\nevalDeferred(\"zenTools\");" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ZEN" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "python(\"import zen\");\nevalDeferred(\"zenTools\");" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import geometryWalker.QT.pickWalker_UI as pickWalker_UI\npickWalker_UI.pickWalkerUI()" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import geometryWalker.QT.pickWalker_UI as pickWalker_UI\npickWalk..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "reOrder" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import geometryWalker.QT.pickWalker_UI as pickWalker_UI\npickWalker_UI.pickWalkerUI()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import en_zipperEdge\nen_zipperEdge.en_zipperEdge()" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import en_zipperEdge\nen_zipperEdge.en_zipperEdge()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "zipper" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import en_zipperEdge\nen_zipperEdge.en_zipperEdge()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import en_loopCircle\nen_loopCircle.en_loopCircle()" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import en_loopCircle\nen_loopCircle.en_loopCircle()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "circlize" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import en_loopCircle\nen_loopCircle.en_loopCircle()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import en_holeGrid\nen_holeGrid.en_holeGrid()" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import en_holeGrid\nen_holeGrid.en_holeGrid()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "holeGrid" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import en_holeGrid\nen_holeGrid.en_holeGrid()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "proc jc_faceCut(){\n    string $edgeSel[] = `ls -sl`;\n    string $buffer[];\n    tokenize $edgeSel[0] \"[].\" $buffer;\n    string $objname = $buffer[0];\n    \n    polyUVSet -create -uvSet \"originalSet\" -copy -nuv \"originalSet\";\n    polyUVSet -currentLastUVSet;\n    int $faces[] = `polyEvaluate -f $objname`;\n    polyProjection -ch 1 -type Planar -ibd on -md x ($objname + \".f[0:\"+ $faces[0] + \"]\");\n    polyMapCut $edgeSel;    \n    select ($objname + \".f[0]\");\n    polySelectBorderShell 0;\n    polyUVSet -delete;\n}\njc_faceCut();" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "proc jc_faceCut(){\n    string $edgeSel[] = `ls -sl`;\n    string ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "faceCut" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "proc jc_faceCut(){\n    string $edgeSel[] = `ls -sl`;\n    string $buffer[];\n    print $edgeSel;\n    tokenize $edgeSel[0] \"[].\" $buffer;\n    string $objname = $buffer[0];\n    \n    polyUVSet -create -uvSet \"originalSet\" -copy -nuv \"originalSet\";\n    polyUVSet -currentLastUVSet;\n    int $faces[] = `polyEvaluate -f $objname`;\n    polyProjection -ch 1 -type Planar -ibd on -md x ($objname + \".f[0:\"+ $faces[0] + \"]\");\n    polyMapCut $edgeSel; \n    string $first = ($objname + \".f[0]\");   \n    select $first;\n    textureWindowSelectConvert 4;\n    polySelectBorderShell 0;\n    textureWindowSelectConvert 1;\n    polyUVSet -delete;\n}\njc_faceCut();\n\n\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "proc jc_wrapBS(){\n    global string $newSource;\n    global string $oldSource;\n    global string $oldTargets[];\n\twindow -title \"jc_wrapBS\" -w 300 -h 200;\n    // columnLayout;\n    // columnLayout -adjustableColumn true;\n    columnLayout -columnAttach \"both\" 5 -rowSpacing 5 -columnWidth 100;\n    button -label \"New Source\" -command \"jc_wrapBS_addNewSource()\";\n    button -label \"Old Source\" -command \"jc_wrapBS_addOldSource()\";\n    button -label \"Old Targets\" -command \"jc_wrapBS_addOldDest()\";\n    button -label \"Run!\" -command \"jc_wrapBS_run\";\n\tshowWindow;\n}\n\nproc jc_wrapBS_addNewSource(){\n    string $selection[] = `ls -sl`;\n    global string $newSource;\n    $newSource = $selection[0];\n    print (\"addNewSource = \" + $newSource+ \"\\n\");\n    \n}\n\nproc jc_wrapBS_addOldSource(){\n    string $selection[] = `ls -sl`;\n    global string $oldSource;\n    $oldSource = $selection[0];\n    print (\"addOldSource = \" + $oldSource+ \"\\n\");\n}\n\nproc jc_wrapBS_addOldDest(){\n    global string $oldTargets[];\n    $oldTargets = `ls -sl`;\n    for ($i in $oldTargets) {\n    print (\"addOldDest = \" + $i + \"\\n\");\n    }\n}\n\nproc jc_wrapBS_run(){\n    global string $newSource;\n    global string $oldSource;\n    global string $oldTargets[];\n    string $sel;\n    print \"Running wrapBS!\\n\";\n    print (\"NewSource = \" + $newSource+ \"\\n\");\n    print (\"OldSource = \" + $oldSource+ \"\\n\");\n    print (\"OldDest = \" + $oldTargets[0] + \"\\n\");\n    string $newGroup = `group -em -name wrapGroup`;\n    \n    // create deformer, need to learn what do Wrap args do!\n    select -r $newSource $oldSource; \n    string $wrapName[] = `doWrapArgList \"2\" { \"1\",\"0\",\"1\" }`;\n    print (\"name of wrap deformer node: \" + $wrapName[0]); \n\n    // create blendshape\n    select -r $oldTargets $oldSource;\n    string $blendContainer[] = `blendShape`;\n    \n    // iterate blend to all the targets\n   for ($sel in $oldTargets){\n       setAttr ($blendContainer[0] + \".\" + $sel) 1;\n       parent `duplicate $newSource` $newGroup;\n       setAttr ($blendContainer[0] + \".\" + $sel) 0;\n   }\n   print \"RUN HAS ENDED\\n\";\n   print $wrapName[0];\n   print $blendContainer[0];\n   //delete extranese nodes\n   delete $blendContainer[0] $wrapName[0]; \n}\n\njc_wrapBS();" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "proc jc_wrapBS(){\n    global string $newSource;\n    global strin..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "wrapBS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "proc jc_wrapBS(){\n    global string $newSource;\n    global string $oldSource;\n    global string $oldTargets[];\n\twindow -title \"jc_wrapBS\" -w 300 -h 200;\n    // columnLayout;\n    // columnLayout -adjustableColumn true;\n    columnLayout -columnAttach \"both\" 5 -rowSpacing 5 -columnWidth 100;\n    button -label \"New Source\" -command \"jc_wrapBS_addNewSource()\";\n    button -label \"Old Source\" -command \"jc_wrapBS_addOldSource()\";\n    button -label \"Old Targets\" -command \"jc_wrapBS_addOldDest()\";\n    button -label \"Run!\" -command \"jc_wrapBS_run\";\n\tshowWindow;\n}\n\nproc jc_wrapBS_addNewSource(){\n    string $selection[] = `ls -sl`;\n    global string $newSource;\n    $newSource = $selection[0];\n    print (\"addNewSource = \" + $newSource+ \"\\n\");\n    \n}\n\nproc jc_wrapBS_addOldSource(){\n    string $selection[] = `ls -sl`;\n    global string $oldSource;\n    $oldSource = $selection[0];\n    print (\"addOldSource = \" + $oldSource+ \"\\n\");\n}\n\nproc jc_wrapBS_addOldDest(){\n    global string $oldTargets[];\n    $oldTargets = `ls -sl`;\n    for ($i in $oldTargets) {\n    print (\"addOldDest = \" + $i + \"\\n\");\n    }\n}\n\nproc jc_wrapBS_run(){\n    global string $newSource;\n    global string $oldSource;\n    global string $oldTargets[];\n    string $sel;\n    print \"Running wrapBS!\\n\";\n    print (\"NewSource = \" + $newSource+ \"\\n\");\n    print (\"OldSource = \" + $oldSource+ \"\\n\");\n    print (\"OldDest = \" + $oldTargets[0] + \"\\n\");\n    string $newGroup = `group -em -name wrapGroup`;\n    \n    // create deformer, need to learn what do Wrap args do!\n    select -r $newSource $oldSource; \n    string $wrapName[] = `doWrapArgList \"2\" { \"1\",\"0\",\"1\" }`;\n    print (\"name of wrap deformer node: \" + $wrapName[0]); \n\n    // create blendshape\n    select -r $oldTargets $oldSource;\n    string $blendContainer[] = `blendShape`;\n    \n    // iterate blend to all the targets\n   for ($sel in $oldTargets){\n       setAttr ($blendContainer[0] + \".\" + $sel) 1;\n       parent `duplicate $newSource` $newGroup;\n       setAttr ($blendContainer[0] + \".\" + $sel) 0;\n   }\n   print \"RUN HAS ENDED\\n\";\n   print $wrapName[0];\n   print $blendContainer[0];\n   //delete extranese nodes\n   delete $blendContainer[0] $wrapName[0]; \n}\n\njc_wrapBS();" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "//jc_dualToggle\n\n$select = `ls -sl`;\n$firstObj = $select[0];\n$secondObj = $select[1];\nprint $firstObj;\nprint $secondObj;\nprint \"\\n\";\n\n$firstVis = getAttr($firstObj + \".visibility\");\n$secondVis = getAttr($secondObj + \".visibility\");\nprint $firstVis; \nprint $secondVis; \n\nif ($firstVis && $secondVis){\n    setAttr ($secondObj + \".visibility\") 0;\n}\n\nif ($firstVis && !($secondVis)){\n    setAttr ($firstObj + \".visibility\") 0;\n    setAttr ($secondObj + \".visibility\") 1;\n}\n\nif (!($firstVis) && $secondVis){\n    setAttr ($secondObj + \".visibility\") 0;\n    setAttr ($firstObj + \".visibility\") 1;\n}\n" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "//jc_dualToggle\n\n$select = `ls -sl`;\n$firstObj = $select[0];\n$se..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "dualTog" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//jc_dualToggle\n\n$select = `ls -sl`;\n$firstObj = $select[0];\n$secondObj = $select[1];\nprint $firstObj;\nprint $secondObj;\nprint \"\\n\";\n\n$firstVis = getAttr($firstObj + \".visibility\");\n$secondVis = getAttr($secondObj + \".visibility\");\nprint $firstVis; \nprint $secondVis; \n\nif ($firstVis && $secondVis){\n    setAttr ($secondObj + \".visibility\") 0;\n}\n\nif ($firstVis && !($secondVis)){\n    setAttr ($firstObj + \".visibility\") 0;\n    setAttr ($secondObj + \".visibility\") 1;\n}\n\nif (!($firstVis) && $secondVis){\n    setAttr ($secondObj + \".visibility\") 0;\n    setAttr ($firstObj + \".visibility\") 1;\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\ndef jc_smartCombine():\n    selection = cmds.ls(sl=True)\n    \n    #gather name, pivot, and layer information\n    name = selection[0]\n    print (\"name is\" + str(name))    \n    pivot = cmds.xform(name, q=True, worldSpace=True, rotatePivot=True)\n    display_layers = cmds.listConnections(name, type=\"displayLayer\")\n    #combine with no history (empty transforms)\n    new_mesh = cmds.polyUnite(ch=False)   \n    # re-add name, pivot, and display layers\n    cmds.xform(new_mesh, rotatePivot=pivot)\n    if display_layers:\n        cmds.editDisplayLayerMembers(display_layers[0], new_mesh)\n    cmds.rename(new_mesh, name)    \n        \njc_smartCombine()\n" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\ndef jc_smartCombine():\n    selection =..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "combine" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\ndef jc_smartCombine():\n    selection = cmds.ls(sl=True)\n    \n    #gather name, pivot, and layer information\n    name = selection[0]\n    print (\"name is\" + str(name))    \n    pivot = cmds.xform(name, q=True, worldSpace=True, rotatePivot=True)\n    display_layers = cmds.listConnections(name, type=\"displayLayer\")\n    #combine with no history (empty transforms)\n    new_mesh = cmds.polyUnite(ch=False)   \n    # re-add name, pivot, and display layers\n    cmds.xform(new_mesh, rotatePivot=pivot)\n    if display_layers:\n        cmds.editDisplayLayerMembers(display_layers[0], new_mesh)\n    cmds.rename(new_mesh, name)    \n        \njc_smartCombine()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaUI as OpenMayaUI\n\nview = OpenMayaUI.M3dView.active3dView()\ncam = OpenMaya.MDagPath()\nview.getCamera(cam)\ncamPath = cam.fullPathName()\ncmds.setAttr(str(camPath+\".nearClipPlane\"),.001)\ncmds.setAttr(str(camPath+\".farClipPlane\"),1)\n" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "clipSM" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaUI as OpenMayaUI\n\nview = OpenMayaUI.M3dView.active3dView()\ncam = OpenMaya.MDagPath()\nview.getCamera(cam)\ncamPath = cam.fullPathName()\ncmds.setAttr(str(camPath+\".nearClipPlane\"),.001)\ncmds.setAttr(str(camPath+\".farClipPlane\"),1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "option1" ( "print(\"User defined menuItem\");" )
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaUI as OpenMayaUI\n\nview = OpenMayaUI.M3dView.active3dView()\ncam = OpenMaya.MDagPath()\nview.getCamera(cam)\ncamPath = cam.fullPathName()\ncmds.setAttr(str(camPath+\".nearClipPlane\"),0.1)\ncmds.setAttr(str(camPath+\".farClipPlane\"),10000)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "clipMD" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaUI as OpenMayaUI\n\nview = OpenMayaUI.M3dView.active3dView()\ncam = OpenMaya.MDagPath()\nview.getCamera(cam)\ncamPath = cam.fullPathName()\ncmds.setAttr(str(camPath+\".nearClipPlane\"),0.1)\ncmds.setAttr(str(camPath+\".farClipPlane\"),10000)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaUI as OpenMayaUI\n\nview = OpenMayaUI.M3dView.active3dView()\ncam = OpenMaya.MDagPath()\nview.getCamera(cam)\ncamPath = cam.fullPathName()\ncmds.setAttr(str(camPath+\".nearClipPlane\"),1)\ncmds.setAttr(str(camPath+\".farClipPlane\"),100000)" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "clipLG" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaUI as OpenMayaUI\n\nview = OpenMayaUI.M3dView.active3dView()\ncam = OpenMaya.MDagPath()\nview.getCamera(cam)\ncamPath = cam.fullPathName()\ncmds.setAttr(str(camPath+\".nearClipPlane\"),1)\ncmds.setAttr(str(camPath+\".farClipPlane\"),100000)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\n\ndef jc_imagePlaneToggle():\n    currentCam = cmds.modelPanel(cmds.getPanel(wf=True), q=True, cam=True)\n    currentCamShape = cmds.listRelatives(currentCam,c=True,f=True)\n    imagePlaneTrans = cmds.listConnections(currentCamShape)\n    array = cmds.listRelatives(imagePlaneTrans[0], shapes=True)\n    myImagePlane = array[0]\n\n    if myImagePlane:\n        planeAlphaState = cmds.getAttr(str(myImagePlane) + \".alphaGain\")\n        if planeAlphaState != 0 and planeAlphaState != .5 and planeAlphaState != 1:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",0)\n        elif planeAlphaState == 1:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",0)\n        elif planeAlphaState == 0:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",.5)\n        elif planeAlphaState == .5:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",1)\n\n\njc_imagePlaneToggle()" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\n\ndef jc_imagePlaneToggle():\n    curren..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "imgPlane" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n\ndef jc_imagePlaneToggle():\n    currentCam = cmds.modelPanel(cmds.getPanel(wf=True), q=True, cam=True)\n    currentCamShape = cmds.listRelatives(currentCam,c=True,f=True)\n    imagePlaneTrans = cmds.listConnections(currentCamShape)\n    array = cmds.listRelatives(imagePlaneTrans[0], shapes=True)\n    myImagePlane = array[0]\n\n    if myImagePlane:\n        planeAlphaState = cmds.getAttr(str(myImagePlane) + \".alphaGain\")\n        if planeAlphaState != 0 and planeAlphaState != .5 and planeAlphaState != 1:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",0)\n        elif planeAlphaState == 1:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",0)\n        elif planeAlphaState == 0:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",.5)\n        elif planeAlphaState == .5:\n            cmds.setAttr(str(myImagePlane)+\".alphaGain\",1)\n\n\njc_imagePlaneToggle()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\n#get selection and conver to UVs\nselection = cmds.ls(selection=True)\nuvs = cmds.polyListComponentConversion (selection, tuv=True )\n\n#get first UV in returned array and round down to find the pivot of the flip \nuvalue = cmds.polyEditUV(uvs[0], query=True )\npivot = round(uvalue[0]-.5)\n\n#run polyEditUV and scale around the pivot+.5\ncmds.polyEditUV(pivotU=(pivot+.5), scaleU=-1)\n" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\n\n#get selection and conver to UVs\nselec..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "UVFlip" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n#get selection and conver to UVs\nselection = cmds.ls(selection=True)\nuvs = cmds.polyListComponentConversion (selection, tuv=True )\n\n#get first UV in returned array and round down to find the pivot of the flip \nuvalue = cmds.polyEditUV(uvs[0], query=True )\npivot = round(uvalue[0]-.5)\n\n#run polyEditUV and scale around the pivot+.5\ncmds.polyEditUV(pivotU=(pivot+.5), scaleU=-1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
